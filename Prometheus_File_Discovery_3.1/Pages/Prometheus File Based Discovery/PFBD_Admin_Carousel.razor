<!-- Blazor Section -->
@page "/PFBD_Admin"
@using YamlDotNet.Serialization
@using Newtonsoft.Json
@using System.IO
@using System.IO.Compression
@using System.Threading
@using Microsoft.Extensions.FileSystemGlobbing.Internal.PathSegments
@using Microsoft.Extensions.Logging
@using Microsoft.VisualBasic.CompilerServices
@using Newtonsoft.Json.Linq
@using Prometheus_File_Discovery_.NET_Core_3._1.Pages.Prometheus_File_Based_Discovery.Model
@inject IJSRuntime JS


@* @inject HttpClient Http *@

<!-- HTML Section -->
<div class="container-fluid mt-3">

@if (string.IsNullOrEmpty(fileString))
{
    <div class="row my-4 justify-content-center">
        <h1 class="display-3 text-center text-muted">Prometheus Configurator</h1>
        <ul class="nav justify-content-center">
            <li class="nav-item">
                <a class="nav-link active" href="#" aria-current="page" @onclick:preventDefault @onclick="saveConfig">Save Configuration</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" @onclick:preventDefault @onclick="downloadFiles">Download Files</a>
            </li>
            <li class="nav-item">
                <sup>
                    <h6 class="float-end">
                        <p>
                            <span class="badge bg-warning text-dark" style="margin-top:11px;">No previous config found</span>
                        </p>
                    </h6>
                </sup>
            </li>
        </ul>
    </div>
}
else
{
    <div class="row my-4 justify-content-center">
        <h1 class="display-3 text-center text-muted">Prometheus Configurator </h1>
        <ul class="nav justify-content-center">
            <li class="nav-item">
                <a class="nav-link active" href="#" aria-current="page" @onclick:preventDefault @onclick="@saveConfig">Save Configuration</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" @onclick:preventDefault @onclick="downloadFiles">Download Files</a>
            </li>
            <li class="nav-item">
                <p>
                    <span class="badge bg-success text-white" style="margin-top:11px;">Config loaded</span>
                </p>
            </li>
        </ul>
    </div>
}

<!-- Toast Message -->
<div class="toast-container position-absolute bottom-0 end-0 p-3">
    
    <div id="toastEr" class="toast text-black bg-info" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <!-- <img src="..." class="rounded me-2" alt="..."> -->
            <strong class="me-auto">Configurator Update</strong>
            <small>Just Now</small>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body bg-white">
            Operation successful!
        </div>
    </div>
    
</div>


<!-- Control Forms -->
<div class="row my-5">
    
    <div id="carouselExampleIndicators" class="carousel carousel-dark slide" data-bs-ride="carousel">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>

        <div class="carousel-inner">

            <!-- Add Form Input -->
            <div class="carousel-item active" data-bs-interval="9000000000">
                <div class="card w-50 mx-auto">
                    <div class="card-header">
                        <h3 class="text-center">Add</h3>
                    </div>
                    <div class="card-body border border-info">
                        
                        <!-------------------------------------- Add Job Name -->
                        <div class="input-group needs-validation input-group-sm mb-3">
                            <span id="SpanAddJobName" class="input-group-text" >Job Name</span>
                            <input id="InputAddJobName" type="text" class="form-control " @bind-value="@add_jobName" placeholder="Job Name" aria-label="Job Name" aria-describedby="SpanAddJobName" required="required"/>
                        </div>
                        <div id="ErrorAddJobName" class="invalid-feedback">
                            <p>Enter your job name</p>
                        </div>

                        <!-------------------------------------- Add Targets -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanAddTargets" class="input-group-text">Targets</span>
                            <input id="InputAddTargets" type="text" class="form-control" @bind-value="@add_targets" placeholder="192.168.0.1:8000, 192.168.1.1:3000" aria-label="Scrape Interval" aria-describedby="SpanAddTargets"/>
                        </div>
                        <div id="ErrorAddTargets" class="invalid-feedback">
                            <p>Enter your target IPs separated by a comma an optional whitespace (, ) - but always include the target port.</p>
                        </div>

                        <!-------------------------------------- Add Labels -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanAddLabels" class="input-group-text">Labels</span>
                            <input id="InputAddLabels" type="text" class="form-control" @bind-value="@add_labels" placeholder="key:value, key2:value2" aria-label="Scrape Interval" aria-describedby="SpanAddLabels"/>
                        </div>
                        <div id="ErrorAddLabels" class="invalid-feedback">
                            <p>Enter the key-value pairs separated by colon (key:value) and each tuple separated by comma (, ).</p>
                        </div>

                        <!-------------------------------------- Add Scrape Interval -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanAddScrapeInterval" class="input-group-text">Scrape Interval</span>
                            <input id="InputAddScrapeInterval" type="text" class="form-control" @bind-value="@add_scrapeInterval" placeholder="10s" aria-label="Scrape Interval" aria-describedby="SpanAddScrapeInterval"/>
                        </div>
                        <div id="ErrorAddScrapeInterval" class="invalid-feedback">
                            <p>Enter the scrape interval in seconds (min 15s), adding a trailing s (XYZs).</p>
                        </div>

                        <!-------------------------------------- Add Scrape Timeout -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanAddScrapeTimeout" class="input-group-text">Scrape Timeout</span>
                            <input id="InputAddScrapeTimeout" type="text" class="form-control" @bind-value="@add_scrapeTimeout" placeholder="5s" aria-label="Scrape Timeout" aria-describedby="SpanAddScrapeTimeout"/>
                        </div>
                        <div id="ErrorAddScrapeTimeout" class="invalid-feedback">
                            <p>Enter the scrape timeout in seconds, adding a trailing s (XYZs).</p>
                        </div>

                        <!-------------------------------------- Add Metrics Path -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanAddMetricsPath" class="input-group-text">Metrics Path</span>
                            <input id="InputAddMetricsPath" type="text" class="form-control" @bind-value="@add_metricsPath" placeholder="/metrics" aria-label="Metrics Path" aria-describedby="SpanAddMetricsPath"/>
                        </div>
                        <div id="ErrorAddMetricsPath" class="invalid-feedback">
                            <p>Enter the metrics path beginning with a slash, directly followed by your path (/ABCDEFG). </p>
                        </div>

                        <!-------------------------------------- Add Scheme -->
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text" for="AddSchemeGroupSelect">Scheme</label>
                            <select class="form-select" id="AddSchemeGroupSelect" required="required">
                                <option value="http">http</option>
                                <option value="https">https</option>
                            </select>
                        </div>

                    </div>
                    <div class="card-footer text-muted">
                        <button type="submit" value="Submit" class="btn btn-primary float-end" @onclick="addScrapingTarget">Add</button>
                    </div>
                </div>
            </div>

            <!-- Update Form Input -->
            <div class="carousel-item" data-bs-interval="9000000000">
                <div class="card w-50 mx-auto">
                    <div class="card-header">
                        <h3 class="text-center">Update</h3>
                    </div>
                    <div class="card-body border border-warning">
                        
                        <!-------------------------------------- Update Job Name -->
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text" for="inputGroupSelect01">Job Name</label>
                            <select id="InputUpdateJobName" class="form-select" @onchange="@updateUpdateFields" >
                                @foreach (string jobName in jobNames)
                                {
                                    <option value="@jobName">@jobName</option>
                                }
                            </select>
                        </div>
                        
                        <!-------------------------------------- Update Targets -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanUpdateTargets" class="input-group-text" >Targets</span>
                            <input id="InputUpdateTargets" type="text" class="form-control" @bind-value="@update_targets" placeholder="192.168.0.1:8000, 192.168.1.1:3000" aria-label="Scrape Interval" aria-describedby="basic-addon1"/>
                        </div>
                        <div id="ErrorUpdateTargets" class="invalid-feedback">
                            <p>Enter your target IPs separated by a comma an optional whitespace (, ) - but always include the target port.</p>
                        </div>
                        
                        <!-------------------------------------- Update Labels -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanUpdateLabels " class="input-group-text" >Labels</span>
                            <input id="InputUpdateLabels" type="text" class="form-control" @bind-value="@update_labels" placeholder="key:value, key2:value2" aria-label="Scrape Interval" aria-describedby="basic-addon1"/>
                        </div>
                        <div id="ErrorUpdateLabels" class="invalid-feedback">
                            <p>Enter the key-value pairs separated by colon (key:value) and each tuple separated by comma (, ).</p>
                        </div>
                        
                        <!-------------------------------------- Update Scrape Interval -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanUpdateScrapeInterval" class="input-group-text">Scrape Interval</span>
                            <input id="InputUpdateScrapeInterval" type="text" class="form-control" @bind-value="@update_scrapeInterval" placeholder="10s" aria-label="Scrape Interval" aria-describedby="basic-addon1"/>
                        </div>
                        <div id="ErrorUpdateScrapeInterval" class="invalid-feedback">
                            <p>Enter the scrape interval in seconds (min 15s), adding a trailing s (XYZs).</p>
                        </div>
                        
                        <!-------------------------------------- Update Scrape Timeout -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanUpdateScrapeTimeout" class="input-group-text">Scrape Timeout</span>
                            <input id="InputUpdateScrapeTimeout" type="text" class="form-control" @bind-value="@update_scrapeTimeout" placeholder="5s" aria-label="Scrape Timeout" aria-describedby="basic-addon1"/>
                        </div>
                        <div id="ErrorUpdateScrapeTimeout" class="invalid-feedback">
                                                    <p>Enter the scrape timeout in seconds, adding a trailing s (XYZs).</p>
                                                </div>
                        
                        <!-------------------------------------- Update Metrics Path -->
                        <div class="input-group input-group-sm mb-3">
                            <span id="SpanUpdateMetricsPath" class="input-group-text" >Metrics Path</span>
                            <input id="InputUpdateMetricsPath" type="text" class="form-control" @bind-value="@update_metricsPath" placeholder="/metrics" aria-label="Metrics Path" aria-describedby="basic-addon1"/>
                        </div>
                        <div id="ErrorUpdateMetricsPath" class="invalid-feedback">
                                                    <p>Enter the metrics path beginning with a slash, directly followed by your path (/ABCDEFG). </p>
                                                </div>
                        
                        <!-------------------------------------- Update Scheme -->
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text" for="inputGroupSelect01">Scheme</label>
                            <select @bind="@update_scheme" class="form-select" id="inputGroupSelect01">
                                <option value="https">https</option>
                                <option value="http">http</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-footer text-muted">
                        <button type="button" class="btn btn-primary float-end" @onclick="updateScrapingTarget">Update</button>
                    </div>
                </div>
            </div>

            <!-- Delete Form Input -->
            <div class="carousel-item" data-bs-interval="9000000000">
                <div class="card w-50 mx-auto">
                    <div class="card-header">
                        <h3 class="text-center">Remove</h3>
                    </div>
                    <div class="card-body border border-secondary">
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text" for="inputGroupSelect01">Job Name</label>
                            <select class="form-select" @onchange="@updateDeleteField" id="inputGroupSelect01">
                                @foreach (string jobName in jobNames)
                                {
                                    <option value="@jobName">@jobName</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="card-footer text-muted">
                        <button type="button" class="btn btn-danger float-end" @onclick="removeScrapingTarget">Remove</button>
                    </div>
                </div>

                <!-- Upload configuration -->
                <div class="card my-4 w-50 mx-auto">
                    <div class="card-header">
                        <h3 class="text-center">Upload Configuration</h3>
                    </div>
                    <div class="card-body border border-secondary">
                        <div class="input-group mb-3">
                            <InputFile OnChange="@OnInputFileChange"></InputFile>
                        </div>
                    </div>
                    <div class="card-footer text-muted">
                        <button type="button" class="btn btn-warning float-end" @onclick="uploadConfiguration">Upload</button>
                    </div>
                </div>
            </div>

        </div>

        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>

</div>
</div>

<!-- Code Section-->
@code {
    
    // Fields
    private string? add_jobName { get; set; }
    private string? add_scrapeInterval { get; set; }
    private string? add_scrapeTimeout { get; set; }
    private string? add_metricsPath { get; set; }
    private string? add_scheme { get; set; }
    private string? add_targets { get; set; }
    private string? add_labels { get; set; }
    private List<string> add_targetList { get; } = new List<string>();
    private List<ConfigurationComponents.Label> add_labelList { get; } = new List<ConfigurationComponents.Label>();

    private string? update_jobName { get; set; }
    private string? update_scrapeInterval { get; set; }
    private string? update_scrapeTimeout { get; set; }
    private string? update_metricsPath { get; set; }
    private string? update_scheme { get; set; }
    private string? update_targets { get; set; }
    private string? update_labels { get; set; }
    private List<string> update_targetList { get; } = new List<string>();
    private List<ConfigurationComponents.Label> update_LabelList { get; } = new List<ConfigurationComponents.Label>();
    private List<string> jobNames = new List<string>();

    private static readonly string dataDirectory = "wwwroot/Data";
    private readonly string lastUploadPath = dataDirectory + "/uploaded_prometheus_config.yml";
    private readonly string lastConfigPath = dataDirectory + "/previous_prometheus_config.yml";
    private readonly string savedYamlConfigPath = dataDirectory + "/prometheus.yml";
    private readonly string savedClassicYamlConfigPath = dataDirectory + "/prometheus.yml";
    private readonly string savedJsonConfigPath = dataDirectory + "/targets_";
    private readonly string zipPath = dataDirectory + "/prometheus_config.zip";

    private string? delete_jobName { get; set; }
    private IFileListEntry file;
    private dynamic? dynamicConfig { get; set; }
    private dynamic? currentDynamicConfig { get; set; }
    private string fileString { get; set; }
    private string jsonConfigString { get; set; }
    private string yamlConfigString { get; set; }
    private List<dynamic> changes = new List<dynamic>(); // This may be obsolete
    private PrometheusConfiguration prometheusConfiguration { get; set; } = new PrometheusConfiguration();

    private bool showAddAlert { get; set; } = false;
    private bool showUpdateAlert { get; set; } = false;
    private bool showDeleteAlert { get; set; } = false;
    private bool showUploadAlert { get; set; } = false;
    private bool showOverrideAlert { get; set; } = false;
    private bool showInputAlert { get; set; } = false;
    private bool showErrorAlert { get; set; } = false;
    
    private bool inputIsValid { get; set; } = true;
    private Dictionary<string, bool> validationResult { get; set; } = new Dictionary<string, bool>();


    // ------------------------------------------  Methods to load & save data
    protected override async Task OnInitializedAsync()
    {
        // Create data directory if required
        if (!Directory.Exists(dataDirectory))
        {
            Directory.CreateDirectory(dataDirectory);
        }
        
        // Load last custom config
        if (File.Exists(lastConfigPath) && string.IsNullOrEmpty(fileString))
        {
            Console.WriteLine("Uploaded Configuration detected...");
            fileString = await File.ReadAllTextAsync(lastConfigPath);
            convertUploadToJson(fileString);
            Console.WriteLine("Configuration loaded successfully: ");
            changes.Add(dynamicConfig);
            currentDynamicConfig = dynamicConfig;

            // Populate update-dropdown panel with jobs
            this.updateDropdowns();
        }

        // Otherwise, load last uploaded config
        else if (File.Exists(lastUploadPath) && string.IsNullOrEmpty(fileString))
        {
            Console.WriteLine("Uploaded Configuration detected...");
            fileString = await File.ReadAllTextAsync(lastUploadPath);
            convertUploadToJson(fileString);
            Console.WriteLine("Configuration loaded successfully: ");
            changes.Add(dynamicConfig);
            var clone = JsonConvert.DeserializeObject<dynamic>(JsonConvert.SerializeObject(dynamicConfig));
            currentDynamicConfig = clone;

    // Populate update-dropdown panel with jobs
            this.updateDropdowns();
        }
    }

    private void OnInputFileChange(IFileListEntry[] files)
    {
        // Create popup, warning for overriding configuration
        if (!string.IsNullOrEmpty(fileString))
        {
            showOverrideAlert = true;
        }
        
        // Console.WriteLine("File upload detected");
        file = files.FirstOrDefault();
    }

    private void convertUploadToJson(string fileString)
    {
    // Convert file input to YAML object
        try
        {
            var deserializer = new Deserializer();
            var stringReader = new StringReader(fileString);
            var yamlObject = deserializer.Deserialize(stringReader);

    // Convert YAML object to JSON object
            var serializer = new JsonSerializer();
            var stringWriter = new StringWriter();
            serializer.Serialize(stringWriter, yamlObject);

    // Create dynamic class out of JSON object
            dynamicConfig = JsonConvert.DeserializeObject(stringWriter.ToString());
            jsonConfigString = dynamicConfig.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine($"[CONVERSION:C#:EXCEPTION] {e}");
        }
    }

    private async Task readUpload()
    {
        // Read file
        try
        {
            using var reader = new System.IO.StreamReader(file.Data);
            fileString = await reader.ReadToEndAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine($"[UPLOAD:EXCEPTION] {e}");
        }


    // Create a copy of the upload on the server
        try
        {
            await File.WriteAllTextAsync(lastUploadPath, fileString);
        }
        catch (Exception e)
        {
            Console.WriteLine($"[FILE:WRITE:EXCEPTION] {e}");
        }
    }

    private async Task saveConfig()
    {
        if (!string.IsNullOrEmpty(fileString))
        {
            // Save a "classic" prometheus.yml file, without the addition of file_sd_configs
            yamlConfigString = PrometheusYamlDeserializer.serializeToYaml(currentDynamicConfig.ToString());
            try
            {
                await File.WriteAllTextAsync(lastConfigPath, yamlConfigString);
            }
            catch (Exception e)
            {
                Console.WriteLine($"[YAML:FILE.WRITE:EXCEPTION] {e}");
            }

            var clone = JsonConvert.DeserializeObject<dynamic>(JsonConvert.SerializeObject(dynamicConfig));

            // For each scrape_config (POH job), get the labels & the targets and put them in a separate JSON file
            for (int scrapeConfigsIndex = 0; scrapeConfigsIndex < clone["scrape_configs"].Count; scrapeConfigsIndex++)
            {
                string jobName = clone["scrape_configs"][scrapeConfigsIndex]["job_name"];
                JArray staticConfigs = clone["scrape_configs"][scrapeConfigsIndex]["static_configs"];

                try
                {
                    // Validate json & write to file
                    InputValidator inputValidator = InputValidator.getInputValidator();
                    string staticConfigString = inputValidator.validateJson(staticConfigs.ToString());
                    await File.WriteAllTextAsync(savedJsonConfigPath + jobName + ".json", staticConfigString);
                }
                catch (Exception e)
                {
                    Console.WriteLine($"[JSON:FILE.WRITE:EXCEPTION] {e}");
                }

                // Manipulate the scrape_config objet to discard it's labels & targets and only have a job_name & file_sd_configs now instead
                clone["scrape_configs"][scrapeConfigsIndex].Remove("static_configs");
                clone["scrape_configs"][scrapeConfigsIndex].Add("file_sd_configs", new JArray(new JObject(new JProperty("files",
                    new JArray("targets_" + jobName + ".json")))));
                
            }

            // Update drop-downs
            jobNames.Clear();
            foreach (var job in clone["scrape_configs"])
            {
                jobNames.Add(job["job_name"].ToString());
            }

            // Convert to YAML & Write to file
            var cloneYamlConfigString = PrometheusYamlDeserializer.serializeToYaml(clone.ToString());
            var originalYamlConfigString = PrometheusYamlDeserializer.serializeToYaml(dynamicConfig.ToString());
            try
            {
                await File.WriteAllTextAsync(savedYamlConfigPath, cloneYamlConfigString);
                await File.WriteAllTextAsync(lastConfigPath, originalYamlConfigString);
            }
            catch (Exception e)
            {
                Console.WriteLine($"[YAML:FILE.WRITE:EXCEPTION] {e}");
            }
        }

        Console.WriteLine("Configuration saved");
        this.updateDropdowns();
    }

    private void updateUpdateFields(ChangeEventArgs eventArgs)
    {
        string selectedString = eventArgs.Value.ToString();
        foreach (var job in dynamicConfig["scrape_configs"])
        {
            if (job["job_name"] == selectedString)
            {
                update_jobName = selectedString;
                update_scrapeInterval = job["scrape_interval"];
                update_scrapeTimeout = job["scrape_timeout"];
                update_scheme = job["scheme"];

    // Read the rest of the information from the separate .JSON file
                if (File.Exists(savedJsonConfigPath + selectedString + ".json"))
                {
                    try
                    {
                        dynamic static_configs = JsonConvert.DeserializeObject(File.ReadAllText(savedJsonConfigPath + selectedString + ".json"));
                        foreach (var option in static_configs)
                        {
                            if (option.ContainsKey("targets"))
                            {
                                string targetsString = option["targets"].ToString();
                                targetsString = targetsString.Replace("[", "")
                                    .Replace("]", "")
                                    .Replace("\"", "")
                                    .Replace(" ", "")
                                    .Replace(",", ", ");
                                update_targets = targetsString;
                            }
                            if (option.ContainsKey("labels"))
                            {
                                string labelString = option["labels"].ToString();
                                labelString = labelString.Replace("{", "")
                                    .Replace("}", "")
                                    .Replace("\"", "")
                                    .Replace(" ", "")
                                    .Replace(",", ", ");
                                update_labels = labelString;
                            }

                            if (option.ContainsKey("scheme"))
                            {
                                update_scheme = option["scheme"];
                            }
                            else
                            {
                                update_scheme = "http";
                            }

                            if (option.ContainsKey("metrics_path"))
                            {
                                update_metricsPath = option["metrics_path"];
                            }
                            else
                            {
                                update_metricsPath = "/metrics";
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine($"[JSON:CONVERT:EXCEPTION] {e}");
                    }
                }
            }
        }
    }

    private void updateDeleteField(ChangeEventArgs eventArgs)
    {
        delete_jobName = eventArgs.Value.ToString();
    }

    private void downloadFiles()
    {
        this.createZip();
        this.downloadZip();
    }

    private void createZip()
    {
        using (var memoryStream = new MemoryStream())
        {
            using (var archive = new ZipArchive(memoryStream, ZipArchiveMode.Create, true))
            {
                foreach (var fileEntry in Directory.GetFiles("Data"))
                {
                    if (fileEntry.Contains(".json") || fileEntry.Contains(".yml"))
                    {
                        var archiveEntry = archive.CreateEntry(fileEntry.Replace("Data\\", ""));

                        using (var entryStream = archiveEntry.Open())
                        using (var streamWriter = new StreamWriter(entryStream))
                        {
                            streamWriter.Write(File.ReadAllText(fileEntry));
                        }
                    }
                }
            }
            using (var fileStream = new FileStream(zipPath, FileMode.Create))
            {
                memoryStream.Seek(0, SeekOrigin.Begin);
                memoryStream.CopyTo(fileStream);
            }
        }
    }

    private async Task downloadZip()
    {
        var fileDownload = await File.ReadAllBytesAsync(zipPath);
        await JS.InvokeVoidAsync("BlazorDownloadFile", "prometheus_config.zip", "application/zip", fileDownload);
    }


    // ------------------------------------------ Methods to manipulate config model
    private void addScrapingTarget()
    {
        // Clear errors if there have been
        JS.InvokeVoidAsync("hideErrors", "Add");
        
        // Clear only lists & reset input boolean
        add_labelList.Clear();
        add_targetList.Clear();
        inputIsValid = true;

        // Set defaults where necessary & do first input validation (only checks if input is empty)
        if (string.IsNullOrEmpty(add_jobName))
        {
            JS.InvokeVoidAsync("showErrorFor", "JobName", "Add");
            inputIsValid = false;
        }
        if (string.IsNullOrEmpty(add_scrapeInterval))
        {
            add_scrapeInterval = "15s";
        }
        if (string.IsNullOrEmpty(add_scrapeTimeout))
        {
            add_scrapeTimeout = "5s";
        }
        if (string.IsNullOrEmpty(add_metricsPath))
        {
            add_metricsPath = "/metrics";
        }
        if (string.IsNullOrEmpty(add_scheme))
        {
            add_scheme = "http";
        }
        if (string.IsNullOrEmpty(add_targets))
        {
            JS.InvokeVoidAsync("showErrorFor", "Targets", "Add");
            inputIsValid = false;
        }

        // Check for errors
        if (inputIsValid)
        {

            // Fill up collections
            add_targetList.AddRange(add_targets.Split(", "));
            if (!string.IsNullOrEmpty(add_labels))
            {
                add_labels = add_labels.Replace(",", ", ");
                var labels = add_labels.Split(", ");
                var splitLabels = from label in labels select label.Split(":");
                for (var index = 0; index < splitLabels.Count(); index += 1)
                {
                    var key = splitLabels.ElementAt(index)[0];
                    var value = splitLabels.ElementAt(index)[1];
                    var label = new ConfigurationComponents.Label(key, value);
                    add_labelList.Add(label);
                }
            }
            
            
            // Create dict to validate inputs
            Dictionary<string, object> validationDict = new Dictionary<string, object>();
            validationDict.Add("Job Name", add_jobName);
            validationDict.Add("Targets", add_targetList);
            if (add_labelList.Count > 0)
            {
                validationDict.Add("Labels", add_labelList);
            }
            validationDict.Add("Scrape Interval", add_scrapeInterval);
            validationDict.Add("Scrape Timeout", add_scrapeTimeout);
            validationDict.Add("Metrics Path", add_metricsPath);
            validationDict.Add("Scheme", add_scheme);

            // Validate
            validationResult = InputValidator.getInputValidator().validateNewTarget(validationDict, dynamicConfig);
            bool isValid = validateDict(validationResult);

            if (isValid)
            {

                // Create Prometheus Job placeholder
                var prometheusJob = new PrometheusJob();
                
                if (add_labelList.Count > 0)
                {
                    // Replace job
                    prometheusJob = new PrometheusJob(add_jobName, add_scrapeInterval, add_scrapeTimeout,
                        add_metricsPath, add_scheme, add_targetList, add_labelList);
                }
                else
                {
                    prometheusJob = new PrometheusJob(add_jobName, add_scrapeInterval, add_scrapeTimeout,
                        add_metricsPath, add_scheme, add_targetList);
                }
                

                // Add to existing model
                dynamicConfig["scrape_configs"].Add(JObject.FromObject(prometheusJob.toScrapeConfigObject()));
                
                this.updateDropdowns();
                this.saveConfig();
                this.showAddAlert = true;
                this.StateHasChanged();

                // Clear lists & errors
                cleanInputsFrom("add");
                JS.InvokeVoidAsync("hideErrors", "Add");
                JS.InvokeVoidAsync("showToast");
            }

            else
            {
                // We get here if we have invalid input
                var param = JsonConvert.SerializeObject(validationResult);
                JS.InvokeVoidAsync("showErrors", param, "Add");
            }

        }
        
        // Clear add_labels for clean interface
        add_labels = "";
    }

    private void updateScrapingTarget()
    {

        // Clear errors if there have been
        JS.InvokeVoidAsync("hideErrors", "Update");
        
        // Clear only lists & reset input boolean
        update_LabelList.Clear();
        update_targetList.Clear();
        inputIsValid = true;

        // Set defaults where necessary & do first input validation (only checks if input is empty)
        if (string.IsNullOrEmpty(update_jobName))
        {
            // JS.InvokeVoidAsync("showErrorFor", "JobName", "Update");
            inputIsValid = false;
        }
        if (string.IsNullOrEmpty(update_scrapeInterval))
        {
            update_scrapeInterval = "15s";
        }
        if (string.IsNullOrEmpty(update_scrapeTimeout))
        {
            update_scrapeTimeout = "5s";
        }
        if (string.IsNullOrEmpty(update_metricsPath))
        {
            update_metricsPath = "/metrics";
        }
        if (string.IsNullOrEmpty(update_scheme))
        {
            update_scheme = "http";
        }
        if (string.IsNullOrEmpty(update_targets))
        {
            JS.InvokeVoidAsync("showErrorFor", "Targets", "Update");
            inputIsValid = false;
        }
        
        // Check for errors
        if (inputIsValid)
        {

            // Fill up collections
            update_targetList.AddRange(update_targets.Split(", "));
            if (!string.IsNullOrEmpty(update_labels))
            {
                update_labels = update_labels.Replace(",", ", ");
                var labels = update_labels.Split(", ");
                var splitLabels = from label in labels select label.Split(":");
                for (var index = 0; index < splitLabels.Count(); index += 1)
                {
                    var key = splitLabels.ElementAt(index)[0];
                    var value = splitLabels.ElementAt(index)[1];
                    var label = new ConfigurationComponents.Label(key, value);
                    update_LabelList.Add(label);
                }
            }
            
            
            // Create dict to validate inputs
            Dictionary<string, object> validationDict = new Dictionary<string, object>();
            validationDict.Add("Targets", update_targetList);
            if (update_LabelList.Count > 0)
            {
                validationDict.Add("Labels", update_LabelList);
            }
            validationDict.Add("Scrape Interval", update_scrapeInterval);
            validationDict.Add("Scrape Timeout", update_scrapeTimeout);
            validationDict.Add("Metrics Path", update_metricsPath);
            validationDict.Add("Scheme", update_scheme);

            // Validate
            validationResult = InputValidator.getInputValidator().validateNewTarget(validationDict, dynamicConfig);
            bool isValid = validateDict(validationResult);

            if (isValid)
            {

                // Create Prometheus Job placeholder
                var prometheusJob = new PrometheusJob();
                
                if (update_LabelList.Count > 0)
                {
                    // Replace job
                    prometheusJob = new PrometheusJob(update_jobName, update_scrapeInterval, update_scrapeTimeout,
                        update_metricsPath, update_scheme, update_targetList, update_LabelList);
                }
                else
                {
                    prometheusJob = new PrometheusJob(update_jobName, update_scrapeInterval, update_scrapeTimeout,
                        update_metricsPath, update_scheme, update_targetList);
                }
                

                // Update existing model
                for (int i = 0; i <= dynamicConfig["scrape_configs"].Count; i++)
                {
                    if (dynamicConfig["scrape_configs"][i]["job_name"] != update_jobName) continue;
                    dynamicConfig["scrape_configs"][i].Remove();
                    break;
                }
                dynamicConfig["scrape_configs"].Add(JObject.FromObject(prometheusJob.toScrapeConfigObject()));
                // Console.WriteLine("Updated job: " + update_jobName);
                this.updateDropdowns();
                update_labels = "";
                this.saveConfig();
                this.StateHasChanged();
        
                // Clear lists & variables
                cleanInputsFrom("update");
                JS.InvokeVoidAsync("hideErrors", "Update");
                JS.InvokeVoidAsync("showToast");
            }

            else
            {
                // We get here if we have invalid input
                var param = JsonConvert.SerializeObject(validationResult);
                JS.InvokeVoidAsync("showErrors", param, "Update");
            }

        }
        

        
    }
    
    private void updateScrapingTargetDeprecated()
    {

        // Set defaults where necessary
        if (string.IsNullOrEmpty(update_jobName))
        {
            update_jobName = "JobDefault";
        }
        if (string.IsNullOrEmpty(update_scrapeInterval))
        {
            update_scrapeInterval = "10s";
        }
        if (string.IsNullOrEmpty(update_scrapeTimeout))
        {
            update_scrapeTimeout = "5s";
        }
        if (string.IsNullOrEmpty(update_metricsPath))
        {
            update_metricsPath = "/metrics";
        }
        if (string.IsNullOrEmpty(update_scheme))
        {
            update_scheme = "http";
        }
        if (string.IsNullOrEmpty(update_targets))
        {
            update_targets = "192.168.0.1";
        }
        if (string.IsNullOrEmpty(update_labels))
        {
            update_labels = "label_1:value_1";
        }

        // Fill up collections
        update_targetList.AddRange(update_targets.Split(","));
        var labels = update_labels.Split(", ");
        var splitLabels = from label in labels select label.Split(":");
        for (var index = 0; index < splitLabels.Count(); index += 1)
        {
            var key = splitLabels.ElementAt(index)[0];
            var value = splitLabels.ElementAt(index)[1];
            // Prevent defaults
            if (key != "label_1")
            {
                var label = new ConfigurationComponents.Label(key, value);
                update_LabelList.Add(label);
            }
            
        }

        // Create new Prometheus Job
        var prometheusJob = new PrometheusJob(update_jobName, update_scrapeInterval, update_scrapeTimeout,
            update_metricsPath, update_scheme, update_targetList, update_LabelList);

        // Update existing model
        for (int i = 0; i <= dynamicConfig["scrape_configs"].Count; i++)
        {
            if (dynamicConfig["scrape_configs"][i]["job_name"] != update_jobName) continue;
            dynamicConfig["scrape_configs"][i].Remove();
            break;
        }
        dynamicConfig["scrape_configs"].Add(JObject.FromObject(prometheusJob.toScrapeConfigObject()));
        // Console.WriteLine("Updated job: " + update_jobName);
        this.updateDropdowns();
        update_labels = "";
        this.saveConfig();
        this.showUpdateAlert = true;
        this.StateHasChanged();
        
        // Clear lists & variables
        cleanInputsFrom("update");
    }

    private void removeScrapingTarget()
    {
        for (int i = 0; i < dynamicConfig["scrape_configs"].Count; i++)
        {
            if (dynamicConfig["scrape_configs"][i]["job_name"] != delete_jobName) continue;
            dynamicConfig["scrape_configs"][i].Remove();
            break;
        }
        if (File.Exists(savedJsonConfigPath + delete_jobName + ".json"))
        {
            try
            {
                File.Delete(savedJsonConfigPath + delete_jobName + ".json");
            }
            catch (Exception e)
            {
                Console.WriteLine($"[FILE:DELETION:EXCEPTION] {e}");
            }
        }
        // Console.WriteLine("Job \"" + delete_jobName + "\" removed.");
        this.updateDropdowns();
        this.saveConfig();
        JS.InvokeVoidAsync("showToast");
        this.StateHasChanged();
    }

    private async void uploadConfiguration()
    {
        // Cleanup Data directory if a previous config existed
        if (!String.IsNullOrEmpty(fileString))
        {
            try
            {
                // Create Backup Dir
                string todayString = DateTime.Now.ToString("g")
                    .Replace("/", ".")
                    .Replace(" ", "-")
                    .Replace(":", "T");
                string backupString = $"Data\\backup\\{todayString}";
                DirectoryInfo dirInfo = Directory.CreateDirectory(backupString);
                foreach (var fileEntry in Directory.GetFiles("Data"))
                {
                    if (fileEntry.Contains(".json") || fileEntry.Contains(".yml"))
                    {
                        File.Move(fileEntry, backupString + "\\" + fileEntry.Replace("Data\\", ""));
                        File.Delete(fileEntry);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Backup Exception: " + e.Message);
            }
            
        }
        
        // Read files
        try
        {
            // We're creating a copy of the upload while reading
            await readUpload();
        }
        catch (Exception e)
        {
            Console.WriteLine($"[UPLOAD:EXCEPTION] {e}");
        }


        // Convert to JSON
        try
        {
            // Here we define the dynamicConfig variable
            convertUploadToJson(fileString);
        }
        catch (Exception e)
        {
            Console.WriteLine($"[CONVERSION:JSON:EXCEPTION] {e}");
        }


        // Convert to .Net object
        try
        {
            currentDynamicConfig = dynamicConfig;
            prometheusConfiguration = JsonToPrometheusConverter.convertJsonToDotNet(dynamicConfig, prometheusConfiguration);
        }
        catch (Exception e)
        {
            Console.WriteLine($"[CONVERSION:C#:EXCEPTION] {e}");
        }

        // Clean inputs
        file = null;
        
        // Refresh UI & save config
        await this.saveConfig();
        JS.InvokeVoidAsync("showToast");
        this.StateHasChanged();
    }
    

    // ------------------------------------------ Helper methods
    
    private void updateDropdowns()
    {
        jobNames.Clear();
        foreach (var job in dynamicConfig["scrape_configs"])
        {
            jobNames.Add(job["job_name"].ToString());
        }
        this.StateHasChanged();
    }

    private bool validateDict(Dictionary<string, bool> inputValidationResult)
    {
        foreach (KeyValuePair<string, bool> entry in inputValidationResult)
        {
            if (!entry.Value)
            {
                return false;
            }
        }
        return true;
    }

    private void cleanInputsFrom(String operation)
    {
        switch (operation)
        {
            case "add":
                add_targetList.Clear();
                add_labelList.Clear();
                add_labels = "";
                add_scheme = "";
                add_targets = "";
                add_jobName = "";
                add_metricsPath = "";
                add_scrapeInterval = "";
                add_scrapeTimeout = "";
                break;
            case "update":
                update_targetList.Clear();
                update_LabelList.Clear();
                update_labels = "";
                update_scheme = "";
                update_targets = "";
                update_jobName = "";
                update_metricsPath = "";
                update_scrapeInterval = "";
                update_scrapeTimeout = "";
                break;
        }
    }
    
    // TODO: Updating a scraping target leads to multiple wrong entries in the target section
    // Half-implemented: Use the cleanInputsFrom() method after a successful add / update to clean the lists
    
    // TODO: Visual feedback. Alerts get removed from the DOM, which leads to Blazor crashing
}